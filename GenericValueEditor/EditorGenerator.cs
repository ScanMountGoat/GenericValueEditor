using GenericValueEditor.Utils;
using System.Collections.Generic;

namespace GenericValueEditor
{
    /// <summary>
    /// Contains methods to create controls for editing an object's member variables.
    /// </summary>
    /// <typeparam name="T">The reference type of the editable object. The member attributes 
    /// determine what editor controls are used.</typeparam>
    public class EditorGenerator<T> where T : class
    {
        private Dictionary<string, EditorValue> valueByName = new Dictionary<string, EditorValue>();

        /// <summary>
        /// The object whose members will be edited by the controls
        /// generated by <see cref="AddEditorControls(System.Windows.Forms.Control)"/>.
        /// </summary>
        public T ObjectToEdit
        {
            get { return objectToEdit; }
            set
            {
                objectToEdit = value;
                ValueEditingUtils.UpdateEditorValues(objectToEdit, valueByName);
            }
        }
        private T objectToEdit = null;

        /// <summary>
        /// Creates a generator to edit the members of <paramref name="objectToEdit"/>.
        /// </summary>
        /// <param name="objectToEdit">The object used to generate the editor controls</param>
        public EditorGenerator(T objectToEdit)
        {
            ObjectToEdit = objectToEdit;
        }

        /// <summary>
        /// Adds editor controls to <paramref name="parent"/>. A <see cref="System.Windows.Forms.FlowLayoutPanel"/>
        /// is recommended.
        /// </summary>
        /// <param name="parent">The control to which the editor controls will be added</param>
        public void AddEditorControls(System.Windows.Forms.Control parent)
        {
            Dictionary<string, List<EditorValue>> editorValuesByGroup = ValueEditingUtils.GroupValuesByGroupName(valueByName);

            foreach (var pair in editorValuesByGroup)
            {
                var spacer = AddGroupSpacer(parent, pair.Key);

                var addedControls = new List<System.Windows.Forms.Control>();
                foreach (var editorValue in pair.Value)
                {
                    addedControls.Add(ControlCreation.ValueControlCreation.AddPropertyControls(editorValue.EditorInfo.Name, editorValue.EditorInfo.Type, parent, valueByName));
                }

                ToggleControlVisiblityOnClick(spacer, addedControls);
            }
        }

        private static void ToggleControlVisiblityOnClick(System.Windows.Forms.Control spacer, List<System.Windows.Forms.Control> addedControls)
        {
            if (spacer != null)
            {
                spacer.Click += (sender, args) =>
                {
                    foreach (var control in addedControls)
                    {
                        control.Visible = !control.Visible;
                    }
                };
            }
        }

        private static System.Windows.Forms.Control AddGroupSpacer(System.Windows.Forms.Control parent, string name)
        {
            if (string.IsNullOrEmpty(name))
                return null;

            var spacerButton = new System.Windows.Forms.Button()
            {
                Text = name,
                Width = parent.Width
            };
            parent.Controls.Add(spacerButton);
            return spacerButton;
        }
    }
}
